{"ast":null,"code":"var _jsxFileName = \"/var/www/html/Mr_amiit/cubedotsProjects/react_laravel_api_project_dec21/react_laravel_rest_api/src/components/frontend/users/AddUsers.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router-dom\";\nimport { store } from \"react-notifications-component\";\nimport Navbar from \"../../../layouts/frontend/Navbar\"; // import { store } from \"react-notifications-component\";\n// import Navbar from \"../../../layouts/frontend/Navbar\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddUsers = () => {\n  _s();\n\n  let navigate = useNavigate();\n\n  const onSubmit = data => {\n    axios.get('/sanctum/csrf-cookie').then(response => {\n      axios.post('/api/register', data).then(res => {\n        if (res.data.status === 200) {\n          localStorage.setItem('auth_token', res.data.token);\n          localStorage.setItem('auth_name', res.data.username);\n          navigate('/login');\n          store.addNotification({\n            title: \"Success!\",\n            message: \"Registered Successfully\",\n            type: \"success\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n              duration: 3000,\n              onScreen: false\n            }\n          });\n        }\n\n        if (res.data.status === 422) {\n          reset({\n            name: res.data.name,\n            password: res.data.password,\n            confirm_password: res.data.confirm_password\n          });\n          store.addNotification({\n            title: \"Failed!\",\n            message: res.data.message.email[0],\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n              duration: 3000,\n              onScreen: false\n            }\n          });\n        }\n      }).catch(err => console.log(err));\n    });\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Fullname is required'),\n    // username: Yup.string()\n    //     .required('Username is required')\n    //     .min(6, 'Username must be at least 6 characters')\n    //     .max(20, 'Username must not exceed 20 characters'),\n    email: Yup.string().required('Email is required').email('Email is invalid'),\n    password: Yup.string().required('Password is required').min(8, 'Password must be at least 8 characters').max(40, 'Password must not exceed 40 characters'),\n    confirm_password: Yup.string().required('Confirm Password is required').oneOf([Yup.ref('password'), null], 'Confirm Password does not match') // acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-dark\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary rounded-0\",\n      \"data-bs-toggle\": \"modal\",\n      \"data-bs-target\": \"#exampleModal\",\n      \"data-bs-whatever\": \"@mdo\",\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: \"exampleModal\",\n      tabIndex: \"-1\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content rounded-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header bg-primary rounded-0\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"exampleModalLabel\",\n              children: \"New message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              \"data-bs-dismiss\": \"modal\",\n              \"aria-label\": \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(Formik, {\n              enableReinitialize: true,\n              validationSchema: validationSchema,\n              initialValues: initialValues,\n              children: () => {\n                return /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    name: \"title\",\n                    label: \"Title\",\n                    component: TextField\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    name: \"serialNumber\",\n                    label: \"Serial Number\",\n                    component: TextField\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    name: \"img\",\n                    children: _ref => {\n                      let {\n                        form,\n                        ...rest\n                      } = _ref;\n                      return /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                          name: \"img\",\n                          onBlur: form.handleBlur,\n                          onChange: _ref2 => {\n                            let {\n                              currentTarget\n                            } = _ref2;\n                            const file = currentTarget.files[0];\n                            const reader = new FileReader();\n\n                            if (file) {\n                              reader.onloadend = () => {\n                                setSelectedFile({\n                                  file,\n                                  previewURI: reader.result\n                                });\n                              };\n\n                              reader.readAsDataURL(file);\n                              form.setFieldValue(\"img\", file);\n                            }\n                          } // ref={inputFile}\n                          ,\n                          type: \"file\",\n                          style: {\n                            paddingTop: 10\n                          },\n                          accept: \".png,.jpg,.jpeg\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 125,\n                          columnNumber: 61\n                        }, this), form.errors.img && form.touched.img ? /*#__PURE__*/_jsxDEV(\"div\", {\n                          style: {\n                            paddingTop: 5,\n                            color: \"#B2484D\",\n                            fontSize: \".75rem\",\n                            fontFamily: \"Segoe UI\"\n                          },\n                          children: JSON.stringify(form.errors.img)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 149,\n                          columnNumber: 65\n                        }, this) : null]\n                      }, void 0, true);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 41\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddUsers, \"Drk4EFrfcNRae/IdHET9JgzcaFM=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c = AddUsers;\nexport default AddUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUsers\");","map":{"version":3,"sources":["/var/www/html/Mr_amiit/cubedotsProjects/react_laravel_api_project_dec21/react_laravel_rest_api/src/components/frontend/users/AddUsers.js"],"names":["React","useState","useEffect","Link","axios","useForm","yupResolver","Yup","useNavigate","store","Navbar","AddUsers","navigate","onSubmit","data","get","then","response","post","res","status","localStorage","setItem","token","username","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","reset","name","password","confirm_password","email","catch","err","console","log","validationSchema","object","shape","string","required","min","max","oneOf","ref","register","handleSubmit","formState","errors","resolver","initialValues","TextField","form","rest","handleBlur","currentTarget","file","files","reader","FileReader","onloadend","setSelectedFile","previewURI","result","readAsDataURL","setFieldValue","paddingTop","img","touched","color","fontSize","fontFamily","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router-dom\";\n\nimport { store } from \"react-notifications-component\";\nimport Navbar from \"../../../layouts/frontend/Navbar\";\n// import { store } from \"react-notifications-component\";\n// import Navbar from \"../../../layouts/frontend/Navbar\";\n\nconst AddUsers = () => {\n\n    let navigate = useNavigate();\n    const onSubmit = data => {\n        axios.get('/sanctum/csrf-cookie').then(response => {\n            axios.post('/api/register', data)\n\n                .then(res => {\n\n                    if (res.data.status === 200) {\n                        localStorage.setItem('auth_token', res.data.token);\n                        localStorage.setItem('auth_name', res.data.username);\n                        navigate('/login');\n                        store.addNotification({\n                            title: \"Success!\",\n                            message: \"Registered Successfully\",\n                            type: \"success\",\n                            insert: \"top\",\n                            container: \"top-right\",\n                            animationIn: [\"animated\", \"fadeIn\"],\n                            animationOut: [\"animated\", \"fadeOut\"],\n                            dismiss: {\n                                duration: 3000,\n                                onScreen: false\n                            }\n                        });\n                    }\n\n                    if (res.data.status === 422) {\n\n                        reset({ name: res.data.name, password: res.data.password, confirm_password: res.data.confirm_password });\n                        store.addNotification({\n\n                            title: \"Failed!\",\n                            message: res.data.message.email[0],\n                            type: \"danger\",\n                            insert: \"top\",\n                            container: \"top-right\",\n                            animationIn: [\"animated\", \"fadeIn\"],\n                            animationOut: [\"animated\", \"fadeOut\"],\n                            dismiss: {\n                                duration: 3000,\n                                onScreen: false\n                            }\n                        });\n\n                    }\n\n                })\n                .catch(err => console.log(err));\n        });\n    };\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Fullname is required'),\n        // username: Yup.string()\n        //     .required('Username is required')\n        //     .min(6, 'Username must be at least 6 characters')\n        //     .max(20, 'Username must not exceed 20 characters'),\n        email: Yup.string()\n            .required('Email is required')\n            .email('Email is invalid'),\n        password: Yup.string()\n            .required('Password is required')\n            .min(8, 'Password must be at least 8 characters')\n            .max(40, 'Password must not exceed 40 characters'),\n        confirm_password: Yup.string()\n            .required('Confirm Password is required')\n            .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\n        // acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n    });\n\n    const { register, handleSubmit, reset, formState: { errors } } = useForm({ resolver: yupResolver(validationSchema) });\n\n\n    return (\n\n\n        <div className=\"text-dark\">\n\n            <button type=\"button\" className=\"btn btn-primary rounded-0\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\">Add User</button>\n\n\n            <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content rounded-0\">\n                        <div className=\"modal-header bg-primary rounded-0\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">New message</h5>\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div className=\"modal-body\">\n\n                            <Formik\n                                enableReinitialize\n                                validationSchema={validationSchema}\n                                initialValues={initialValues}\n                            >\n                                {() => {\n                                    return (\n                                        <Form>\n                                            <Field name=\"title\" label=\"Title\" component={TextField} />\n                                            <Field\n                                                name=\"serialNumber\"\n                                                label=\"Serial Number\"\n                                                component={TextField}\n                                            />\n                                            <Field name=\"img\">\n                                                {({ form, ...rest }) => {\n                                                    return (\n                                                        <>\n                                                            <input\n                                                                name=\"img\"\n                                                                onBlur={form.handleBlur}\n                                                                onChange={({ currentTarget }) => {\n                                                                    const file = currentTarget.files[0];\n                                                                    const reader = new FileReader();\n\n                                                                    if (file) {\n                                                                        reader.onloadend = () => {\n                                                                            setSelectedFile({\n                                                                                file,\n                                                                                previewURI: reader.result\n                                                                            });\n                                                                        };\n                                                                        reader.readAsDataURL(file);\n                                                                        form.setFieldValue(\"img\", file);\n                                                                    }\n                                                                }}\n                                                                // ref={inputFile}\n                                                                type=\"file\"\n                                                                style={{ paddingTop: 10 }}\n                                                                accept=\".png,.jpg,.jpeg\"\n                                                            />\n                                                            {form.errors.img && form.touched.img ? (\n                                                                <div\n                                                                    style={{\n                                                                        paddingTop: 5,\n                                                                        color: \"#B2484D\",\n                                                                        fontSize: \".75rem\",\n                                                                        fontFamily: \"Segoe UI\"\n                                                                    }}\n                                                                >\n                                                                    {JSON.stringify(form.errors.img)}\n                                                                </div>\n                                                            ) : null}\n                                                        </>\n                                                    );\n                                                }}\n                                            </Field>\n                                            <button type=\"submit\">Submit</button>\n                                        </Form>\n                                    );\n                                }}\n                            </Formik>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddUsers;"]},"metadata":{},"sourceType":"module"}