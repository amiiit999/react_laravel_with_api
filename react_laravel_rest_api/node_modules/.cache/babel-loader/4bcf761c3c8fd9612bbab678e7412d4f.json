{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nexport var getIconContent = memoizeFunction(function (iconName) {\n  var _a = getIcon(iconName) || {\n    subset: {},\n    code: undefined\n  },\n      code = _a.code,\n      subset = _a.subset;\n\n  if (!code) {\n    return null;\n  }\n\n  return {\n    children: code,\n    iconClassName: subset.className,\n    fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    mergeImageProps: subset.mergeImageProps\n  };\n}, undefined, true\n/*ignoreNullOrUndefinedResult */\n);\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\n\nexport var FontIcon = function (props) {\n  var iconName = props.iconName,\n      className = props.className,\n      _a = props.style,\n      style = _a === void 0 ? {} : _a;\n  var iconContent = getIconContent(iconName) || {};\n  var iconClassName = iconContent.iconClassName,\n      children = iconContent.children,\n      fontFamily = iconContent.fontFamily,\n      mergeImageProps = iconContent.mergeImageProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties);\n  var accessibleName = props['aria-label'] || props.title;\n  var containerProps = props['aria-label'] || props['aria-labelledby'] || props.title ? {\n    role: mergeImageProps ? undefined : 'img'\n  } : {\n    'aria-hidden': true\n  };\n  var finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, {\n        alt: accessibleName\n      });\n    }\n  }\n\n  return React.createElement(\"i\", __assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, mergeImageProps ? {\n    title: undefined,\n    'aria-label': undefined\n  } : {}, {\n    className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),\n    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n    // https://github.com/microsoft/fluentui/issues/10449\n    style: __assign({\n      fontFamily: fontFamily\n    }, style)\n  }), finalChildren);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\n\nexport var getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n  return FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon, IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string | JSX.Element;\n  iconClassName?: string;\n  fontFamily?: string;\n  mergeImageProps?: boolean;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n      mergeImageProps: subset.mergeImageProps,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily, mergeImageProps } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const accessibleName = props['aria-label'] || props.title;\n  const containerProps =\n    props['aria-label'] || props['aria-labelledby'] || props.title\n      ? {\n          role: mergeImageProps ? undefined : 'img',\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n  let finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, { alt: accessibleName });\n    }\n  }\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      {...(mergeImageProps\n        ? {\n            title: undefined,\n            'aria-label': undefined,\n          }\n        : {})}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {finalChildren}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}