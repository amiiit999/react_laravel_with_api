{"ast":null,"code":"var _jsxFileName = \"/var/www/html/Mr_amiit/cubedotsProjects/react_laravel_api_project_dec21/react_laravel_rest_api/src/components/frontend/users/AddUsers.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router-dom\";\nimport { store } from \"react-notifications-component\";\nimport Navbar from \"../../../layouts/frontend/Navbar\"; // import { store } from \"react-notifications-component\";\n// import Navbar from \"../../../layouts/frontend/Navbar\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUsers = props => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    axios.get('/api/view-users').then(res => {\n      // console.log(\"user test data\",res.data.users);\n      if (res.data.status === 200) {\n        setUsers(res.data.users);\n      }\n    });\n  }, [props]);\n  let navigate = useNavigate();\n\n  const onSubmit = data => {\n    console.log(\"test image data\", data); // axios.get('/sanctum/csrf-cookie').then(response => {\n    //     axios.post('/api/register', data)\n    //         .then(res => {\n    //             if (res.data.status === 200) {\n    //                 localStorage.setItem('auth_token', res.data.token);\n    //                 localStorage.setItem('auth_name', res.data.username);\n    //                 navigate('/login');\n    //                 store.addNotification({\n    //                     title: \"Success!\",\n    //                     message: \"Registered Successfully\",\n    //                     type: \"success\",\n    //                     insert: \"top\",\n    //                     container: \"top-right\",\n    //                     animationIn: [\"animated\", \"fadeIn\"],\n    //                     animationOut: [\"animated\", \"fadeOut\"],\n    //                     dismiss: {\n    //                         duration: 3000,\n    //                         onScreen: false\n    //                     }\n    //                 });\n    //             }\n    //             if (res.data.status === 422) {\n    //                 reset({ name: res.data.name, password: res.data.password, confirm_password: res.data.confirm_password });\n    //                 store.addNotification({\n    //                     title: \"Failed!\",\n    //                     message: res.data.message.email[0],\n    //                     type: \"danger\",\n    //                     insert: \"top\",\n    //                     container: \"top-right\",\n    //                     animationIn: [\"animated\", \"fadeIn\"],\n    //                     animationOut: [\"animated\", \"fadeOut\"],\n    //                     dismiss: {\n    //                         duration: 3000,\n    //                         onScreen: false\n    //                     }\n    //                 });\n    //             }\n    //         })\n    //         .catch(err => console.log(err));\n    // });\n  };\n\n  const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n  const validationSchema = Yup.object().shape({\n    phoneNumber: Yup.string().matches(phoneRegExp, 'Phone number is not valid').min(10, \"too short\").max(10, \"too long\"),\n    // name: Yup.string().required('Fullname is required'),\n    // username: Yup.string()\n    //     .required('Username is required')\n    //     .min(6, 'Username must be at least 6 characters')\n    //     .max(20, 'Username must not exceed 20 characters'),\n    image: Yup.mixed().test(\"numberOfFiles\", \"Image field is required\", value => {\n      if (value.length > 0) return true;\n      return false;\n    }).test(\"fileSize\", \"error information\", value => {\n      if (value.length > 0) return value[0].size <= 5242880;\n      return false;\n    }).test(\"fileType\", \"error information\", value => {\n      if (value.length === 0) return false;\n\n      for (var i = 0; i < value.length; i++) {\n        if (![\"image/jpeg\", \"image/png\", \"image/jpg\"].includes(value[i].type)) return false;\n      }\n\n      return true;\n    }),\n    // email: Yup.string()\n    //     .required('Email is required')\n    //     .email('Email is invalid'),\n    doj: Yup.string().required('DOJ field is required'),\n    document: Yup.mixed().test(\"numberOfFiles\", \"CV field is required\", value => {\n      if (value.length > 0) return true;\n      return false;\n    }).test(\"fileSize\", \"Size Error\", value => {\n      if (value.length > 0) return value[0].size <= 5242880;\n      return false;\n    }).test(\"fileType\", \"Invalid File Format\", value => {\n      if (value.length === 0) return false;\n\n      for (var i = 0; i < value.length; i++) {\n        if (![\"application/pdf\", \"application/doc\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", \"application/vnd.oasis.opendocument.text\"].includes(value[i].type)) return false;\n      }\n\n      return true;\n    }),\n    gender: Yup.string().required('Gender field is required'),\n    about: Yup.string().required('About field is required') // password: Yup.string()\n    //     .required('Password is required')\n    //     .min(8, 'Password must be at least 8 characters')\n    //     .max(40, 'Password must not exceed 40 characters'),\n    // confirm_password: Yup.string()\n    //     .required('Confirm Password is required')\n    //     .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\n    // acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 33\n  }, this);\n};\n\n_s(AddUsers, \"zHPwQkzMbO6qimaH2C5MLRRAdic=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c = AddUsers;\nexport default AddUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUsers\");","map":{"version":3,"sources":["/var/www/html/Mr_amiit/cubedotsProjects/react_laravel_api_project_dec21/react_laravel_rest_api/src/components/frontend/users/AddUsers.js"],"names":["React","useState","useEffect","Link","axios","useForm","yupResolver","Yup","useNavigate","store","Navbar","AddUsers","props","users","setUsers","get","then","res","data","status","navigate","onSubmit","console","log","phoneRegExp","validationSchema","object","shape","phoneNumber","string","matches","min","max","image","mixed","test","value","length","size","i","includes","type","doj","required","document","gender","about","register","handleSubmit","reset","formState","errors","resolver"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAASC,KAAT,QAAsB,+BAAtB;AACA,OAAOC,MAAP,MAAmB,kCAAnB,C,CACA;AACA;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AAEZE,IAAAA,KAAK,CAACW,GAAN,CAAU,iBAAV,EAA6BC,IAA7B,CAAkCC,GAAG,IAAG;AACpC;AACA,UAAGA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,GAAvB,EAA2B;AACvBL,QAAAA,QAAQ,CAACG,GAAG,CAACC,IAAJ,CAASL,KAAV,CAAR;AACH;AAEJ,KAND;AAOH,GATQ,EASP,CAACD,KAAD,CATO,CAAT;AAWA,MAAIQ,QAAQ,GAAGZ,WAAW,EAA1B;;AACA,QAAMa,QAAQ,GAAGH,IAAI,IAAI;AACrBI,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BL,IAA9B,EADqB,CAErB;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACH,GAjDD;;AAkDA,QAAMM,WAAW,GAAG,yGAApB;AACA,QAAMC,gBAAgB,GAAGlB,GAAG,CAACmB,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,WAAW,EAAErB,GAAG,CAACsB,MAAJ,GAAaC,OAAb,CAAqBN,WAArB,EAAkC,2BAAlC,EACZO,GADY,CACR,EADQ,EACJ,WADI,EAEZC,GAFY,CAER,EAFQ,EAEJ,UAFI,CAD2B;AAIxC;AACA;AACA;AACA;AACA;AACAC,IAAAA,KAAK,EAAE1B,GAAG,CAAC2B,KAAJ,GACNC,IADM,CAEL,eAFK,EAGL,yBAHK,EAIJC,KAAD,IAAW;AACT,UAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB,OAAO,IAAP;AACtB,aAAO,KAAP;AACD,KAPI,EAQLF,IARK,CAQA,UARA,EAQY,mBARZ,EAQkCC,KAAD,IAAW;AAC/C,UAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB,OAAOD,KAAK,CAAC,CAAD,CAAL,CAASE,IAAT,IAAiB,OAAxB;AACtB,aAAO,KAAP;AACD,KAXI,EAWFH,IAXE,CAYH,UAZG,EAaH,mBAbG,EAcFC,KAAD,IAAW;AACT,UAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;;AACxB,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACC,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACrC,YACE,CAAC,CAAC,YAAD,EAAe,WAAf,EAA4B,WAA5B,EAAyCC,QAAzC,CAAkDJ,KAAK,CAACG,CAAD,CAAL,CAASE,IAA3D,CADH,EAGE,OAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACD,KAvBE,CATiC;AAmCxC;AACA;AACA;AAEAC,IAAAA,GAAG,EAAEnC,GAAG,CAACsB,MAAJ,GAAac,QAAb,CAAsB,uBAAtB,CAvCmC;AAyCxCC,IAAAA,QAAQ,EAAErC,GAAG,CAAC2B,KAAJ,GACTC,IADS,CAER,eAFQ,EAGR,sBAHQ,EAIPC,KAAD,IAAW;AACT,UAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB,OAAO,IAAP;AACtB,aAAO,KAAP;AACD,KAPO,EAQRF,IARQ,CAQH,UARG,EAQS,YART,EAQwBC,KAAD,IAAW;AACxC,UAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB,OAAOD,KAAK,CAAC,CAAD,CAAL,CAASE,IAAT,IAAiB,OAAxB;AACtB,aAAO,KAAP;AACD,KAXO,EAWLH,IAXK,CAYN,UAZM,EAaN,qBAbM,EAcLC,KAAD,IAAW;AACT,UAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;;AACxB,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACC,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACrC,YACE,CAAC,CAAC,iBAAD,EAAoB,iBAApB,EAAsC,yEAAtC,EAAgH,yCAAhH,EAA2JC,QAA3J,CAAoKJ,KAAK,CAACG,CAAD,CAAL,CAASE,IAA7K,CADH,EAGE,OAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACD,KAvBK,CAzC8B;AAmExCI,IAAAA,MAAM,EAAEtC,GAAG,CAACsB,MAAJ,GACHc,QADG,CACM,0BADN,CAnEgC;AAsExCG,IAAAA,KAAK,EAAEvC,GAAG,CAACsB,MAAJ,GACNc,QADM,CACG,yBADH,CAtEiC,CAwExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/EwC,GAAnB,CAAzB;AAkFA,QAAM;AAAEI,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAA5C,MAA2D9C,OAAO,CAAC;AAAE+C,IAAAA,QAAQ,EAAE9C,WAAW,CAACmB,gBAAD;AAAvB,GAAD,CAAxE;AAIA,sBAG4B;AAAA;AAAA;AAAA;AAAA,UAH5B;AAQH,CAjKD;;GAAMd,Q;UAeaH,W,EAsIkDH,O;;;KArJ/DM,Q;AAmKN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router-dom\";\n\nimport { store } from \"react-notifications-component\";\nimport Navbar from \"../../../layouts/frontend/Navbar\";\n// import { store } from \"react-notifications-component\";\n// import Navbar from \"../../../layouts/frontend/Navbar\";\n\nconst AddUsers = (props) => {\n    const [users, setUsers] = useState([]);\n    \n\n    useEffect(() => {\n      \n        axios.get('/api/view-users').then(res=> {\n            // console.log(\"user test data\",res.data.users);\n            if(res.data.status === 200){\n                setUsers(res.data.users);\n            }\n            \n        });\n    },[props]);\n\n    let navigate = useNavigate();\n    const onSubmit = data => {\n        console.log(\"test image data\",data)\n        // axios.get('/sanctum/csrf-cookie').then(response => {\n        //     axios.post('/api/register', data)\n\n        //         .then(res => {\n\n        //             if (res.data.status === 200) {\n        //                 localStorage.setItem('auth_token', res.data.token);\n        //                 localStorage.setItem('auth_name', res.data.username);\n        //                 navigate('/login');\n        //                 store.addNotification({\n        //                     title: \"Success!\",\n        //                     message: \"Registered Successfully\",\n        //                     type: \"success\",\n        //                     insert: \"top\",\n        //                     container: \"top-right\",\n        //                     animationIn: [\"animated\", \"fadeIn\"],\n        //                     animationOut: [\"animated\", \"fadeOut\"],\n        //                     dismiss: {\n        //                         duration: 3000,\n        //                         onScreen: false\n        //                     }\n        //                 });\n        //             }\n\n        //             if (res.data.status === 422) {\n\n        //                 reset({ name: res.data.name, password: res.data.password, confirm_password: res.data.confirm_password });\n        //                 store.addNotification({\n\n        //                     title: \"Failed!\",\n        //                     message: res.data.message.email[0],\n        //                     type: \"danger\",\n        //                     insert: \"top\",\n        //                     container: \"top-right\",\n        //                     animationIn: [\"animated\", \"fadeIn\"],\n        //                     animationOut: [\"animated\", \"fadeOut\"],\n        //                     dismiss: {\n        //                         duration: 3000,\n        //                         onScreen: false\n        //                     }\n        //                 });\n\n        //             }\n\n        //         })\n        //         .catch(err => console.log(err));\n        // });\n    };\n    const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n    const validationSchema = Yup.object().shape({\n        phoneNumber: Yup.string().matches(phoneRegExp, 'Phone number is not valid')\n        .min(10, \"too short\")\n        .max(10, \"too long\"),\n        // name: Yup.string().required('Fullname is required'),\n        // username: Yup.string()\n        //     .required('Username is required')\n        //     .min(6, 'Username must be at least 6 characters')\n        //     .max(20, 'Username must not exceed 20 characters'),\n        image: Yup.mixed()\n        .test(\n          \"numberOfFiles\",\n          \"Image field is required\",\n          (value) => {\n            if (value.length > 0) return true;\n            return false;\n          }\n        ).test(\"fileSize\", \"error information\", (value) => {\n            if (value.length > 0) return value[0].size <= 5242880;\n            return false;\n          }).test(\n            \"fileType\",\n            \"error information\",\n            (value) => {\n              if (value.length === 0) return false;\n              for (var i = 0; i < value.length; i++) {\n                if (\n                  ![\"image/jpeg\", \"image/png\", \"image/jpg\"].includes(value[i].type)\n                )\n                  return false;\n              }\n              return true;\n            }\n          ),\n\n        // email: Yup.string()\n        //     .required('Email is required')\n        //     .email('Email is invalid'),\n\n        doj: Yup.string().required('DOJ field is required'),\n\n        document: Yup.mixed()\n        .test(\n          \"numberOfFiles\",\n          \"CV field is required\",\n          (value) => {\n            if (value.length > 0) return true;\n            return false;\n          }\n        ).test(\"fileSize\", \"Size Error\", (value) => {\n            if (value.length > 0) return value[0].size <= 5242880;\n            return false;\n          }).test(\n            \"fileType\",\n            \"Invalid File Format\",\n            (value) => {\n              if (value.length === 0) return false;\n              for (var i = 0; i < value.length; i++) {\n                if (\n                  ![\"application/pdf\", \"application/doc\",\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\"application/vnd.oasis.opendocument.text\"].includes(value[i].type)\n                )\n                  return false;\n              }\n              return true;\n            }\n          ),\n        \n        gender: Yup.string()\n            .required('Gender field is required'),\n        \n        about: Yup.string()\n        .required('About field is required'),\n        // password: Yup.string()\n        //     .required('Password is required')\n        //     .min(8, 'Password must be at least 8 characters')\n        //     .max(40, 'Password must not exceed 40 characters'),\n        // confirm_password: Yup.string()\n        //     .required('Confirm Password is required')\n        //     .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\n        // acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n    });\n\n    const { register, handleSubmit, reset, formState: { errors } } = useForm({ resolver: yupResolver(validationSchema) });\n\n    \n\n    return (\n\n\n                                <div>\n                                  \n                                </div>\n                            \n    )\n}\n\nexport default AddUsers;"]},"metadata":{},"sourceType":"module"}